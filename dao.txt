@Component
public class ProductDAO {
 
    @Autowired
    private JdbcTemplate jdbcTemplate;
 
    private static final String TABLE_NAME = "product";
 
    public void add(Product product) {
 
        String insertSQL = "INSERT INTO " + TABLE_NAME + "(name, category, price) VALUES(?,?,?)";
 
        jdbcTemplate.update(insertSQL,  product.getName(), product.getCategory(), product.getPrice());
 
    }
 
    public void update(Product product) {
 
        String updateSQL = "UPDATE " + TABLE_NAME + " SET name=?, category=?, price=? WHERE id=?";
 
        jdbcTemplate.update(updateSQL, product.getName(), product.getCategory(), product.getPrice(), product.getId());
 
    }
 
    public void delete(long productID) {
 
        String deleteSQL = "DELETE FROM " + TABLE_NAME + " WHERE id=?";
 
        jdbcTemplate.update(deleteSQL, productID);
 
    }
 
    public Product findById(long productID) {
 
        String selectSQL = "SELECT * FROM " + TABLE_NAME + " WHERE id=?";
 
        Product emp = jdbcTemplate.queryForObject(selectSQL, new Object[] { productID },
                new BeanPropertyRowMapper<>(Product.class));
 
        return emp;
 
    }
 
    public List<Product> findAll() {
 
        String selectSQL = "SELECT * FROM " + TABLE_NAME;
 
        List<Product> empList = jdbcTemplate.query(selectSQL, new BeanPropertyRowMapper<>(Product.class));
        return empList;
 
    }
 
}


=============

@Controller
public class HomeController {
 
    @Autowired
    private CustomerService customerService;
 
    @Autowired
    private ProductService productService;
 
    @GetMapping("/test")
    public ModelAndView getHomePage() {
 
        ModelAndView modelAndView = new ModelAndView("index");
 
        modelAndView.addObject("ABC", "BootCamp");
 
        return modelAndView;
    }
 
    @GetMapping("/dashboard")
    public ModelAndView getDashboardPage() {
 
        ModelAndView modelAndView = new ModelAndView("dashboard");
 
        List<Product> allProducts = productService.getAllProducts();
 
        modelAndView.addObject("allProducts", allProducts);
 
        return modelAndView;
    }
 
    @GetMapping("/login")
    public ModelAndView getLoginPage() {
 
        ModelAndView modelAndView = new ModelAndView("login");
 
        return modelAndView;
    }
 
    @PostMapping("/login")
    public String doLogin(Login login) {
 
        boolean isLogin = customerService.validate(login);
 
        if (isLogin) {
            return "redirect:/dashboard";
        } else {
            return "redirect:/login";
        }
    }
 
    @GetMapping("/register")
    public ModelAndView getRegisterPage() {
 
        ModelAndView modelAndView = new ModelAndView("register");
 
        return modelAndView;
    }
 
    @PostMapping("/register")
    public String doRegistration(Customer customer) {
 
        customerService.add(customer);
 
        return "redirect:/login";
    }
 
}